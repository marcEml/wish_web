{% extends 'base.html.twig' %}

{% block title %}{{wishlist.title}} | Wish{% endblock %}

{% block nav %}
  {% include 'navbar_no_disconnect.html.twig' %}
{% endblock %}

{% block body %}
<div class="p-4 w-75 m-auto">
    <h3 class="py-4 fw-bold">La WishList <span class="text-primary">{{ wishlist.title }}</span> a été partagée avec vous</h3>

    <!-- Sorting Select -->
    <div class="mb-4">
        <label for="sortSelect" class="form-label fw-bold">Trier par prix :</label>
        <select id="sortSelect" class="form-select w-50">
            <option value="asc">Du moins cher au plus cher</option>
            <option value="desc">Du plus cher au moins cher</option>
        </select>
    </div>

    <div class="container text-center">
      <div class="row row-cols-2" id="items-container">
        {% for item in items %}
          <div class="card mx-1 mb-4 item-card {% if item.id in purchases|map(purchase => purchase.item.id) %}text-muted bg-light{% endif %}" 
            style="width: 18rem;"
            data-id="{{ item.id }}"
            data-price="{{ item.price }}"
            data-external-link="{{ item.externalLink }}">
              <img src="https://t3.ftcdn.net/jpg/06/50/41/82/360_F_650418284_gH1jJH1H9A0ErBxosY1f6ofyPrnCiFie.jpg" class="card-img-top" alt="...">
              <div class="card-body">
          <h5 class="card-title">{{ item.name }}</h5>
          <p class="card-subtitle">{{ item.description }}</p>
          <p class="card-text {% if item.id in purchases|map(purchase => purchase.item.id) %}text-muted{% else %}text-success{% endif %}">{{ item.price }}€</p>
          
          {% if item.id in purchases|map(purchase => purchase.item.id) %}
            {% set itemPurchase = purchases|filter(p => p.item.id == item.id)|first %}
            <div class="purchased-info d-none position-absolute top-0 start-0 w-100 h-100 bg-dark bg-opacity-75 text-white p-3" style="z-index: 10;">
              <h5>Cet item a déjà été acheté par {{ itemPurchase.user.firstName }} {{ itemPurchase.user.lastName }}</h5>
              <p><strong>Message de l'acheteur:</strong> {{ itemPurchase.message }}</p>
              <div class="btn btn-success mb-2">
              <a href="{{ asset('uploads/receipts/' ~ itemPurchase.receiptUrl) }}" target="_blank" class="text-decoration-none text-white">Voir la preuve d'achat</a>
            </div>
            </div>
          {% else %}
            <a
              href="#"
              class="btn btn-primary acheter-btn"
              data-bs-toggle="modal"
              data-bs-target="#buyModal"
            >
              Acheter
            </a>
          {% endif %}
              </div>
          </div>
        {% else %}
          <p>Cette wishlist est vide pour le moment.</p>
        {% endfor %}

      <script>
        document.addEventListener('DOMContentLoaded', function() {
          // Add hover effect for purchased items
          document.querySelectorAll('.item-card.text-muted').forEach(card => {
            card.addEventListener('mouseenter', function() {
        this.querySelector('.purchased-info').classList.remove('d-none');
            });
            
            card.addEventListener('mouseleave', function() {
        this.querySelector('.purchased-info').classList.add('d-none');
            });
          });
        });
      </script>
      </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="buyModal" tabindex="-1" aria-labelledby="buyModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="buyModalLabel">Confirmer l'achat</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
      </div>
      <div class="modal-body">
        Vous pouvez soit rejoindre le site sur lequel vous pouvez acheter le cadeau ou soit téléverser la preuve de paiement.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" id="redirect-buy">Acheter le cadeau</button>
        <button type="button" class="btn btn-primary" id="redirect-upload">Téléverser la preuve de paiement</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<!-- Custom Script -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        let selectedCard = null;
        let externalLink = '#';

        // When 'Acheter' button is clicked, store the selected card and its external link
        document.querySelectorAll('.acheter-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                selectedCard = this.closest('.item-card');
                externalLink = selectedCard.getAttribute('data-external-link');
            });
        });

        // Handle redirection to external link
        document.getElementById('redirect-buy').addEventListener('click', function () {
            if (externalLink && externalLink !== '#') {
          // Open external link in a new tab
          window.open(externalLink, '_blank');
          
          // Also open upload proof route in another tab
          const itemId = selectedCard.getAttribute('data-id');
          const uploadUrl = '{{ path("app_purchase_new", {"id": "ITEM_ID_PLACEHOLDER"}) }}'.replace('ITEM_ID_PLACEHOLDER', itemId);
          window.open(uploadUrl, '_blank');
            } else {
          alert('Lien externe indisponible');
            }
        });

        // Handle redirection to the upload proof route
        document.getElementById('redirect-upload').addEventListener('click', function () {
            if (selectedCard) {
                const itemId = selectedCard.getAttribute('data-id');
                // Build the URL dynamically using the item ID
                window.location.href = '{{ path("app_purchase_new", {"id": "ITEM_ID_PLACEHOLDER"}) }}'.replace('ITEM_ID_PLACEHOLDER', itemId);
            } else {
                alert('Veuillez d\'abord sélectionner un cadeau.');
            }
        });

        // Sorting Logic
        const sortSelect = document.getElementById('sortSelect');
        const itemsContainer = document.getElementById('items-container');

        sortSelect.addEventListener('change', function () {
            const order = this.value;
            const items = Array.from(itemsContainer.querySelectorAll('.item-card'));

            items.sort((a, b) => {
                const priceA = parseFloat(a.getAttribute('data-price'));
                const priceB = parseFloat(b.getAttribute('data-price'));
                return order === 'asc' ? priceA - priceB : priceB - priceA;
            });

            // Clear container and append sorted items
            itemsContainer.innerHTML = '';
            items.forEach(item => itemsContainer.appendChild(item));
        });
    });
</script>

{% endblock %}
